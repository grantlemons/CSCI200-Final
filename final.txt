Author: Grant Lemons
Section: B

# Ultimate Tic-Tac-Toe

> A project that takes Tic-Tac-Toe too far.

## Problem Description

Tic-Tac-Toe is a tried and true game, but it is a little boring.
Recently, however, a variant called Ultimate Tic-Tac-Toe has been gaining momentum.

I thought I would give implementing the more complex ruleset and layout of ultimate
Tic-Tac-Toe through this project, with a focus on clean code, modern C++, and performance.

## Class Descriptions

There were many classes created for this program.
Interfaces were defined as appropriate to allow for modularity.
This modularity was taken advantage of for testing with Dummy versions of all normal concrete classes.
An abstract factory and factory classes were created to easily switch between dummy and real versions.

Graphical Boards encapsulate functionality for drawing to the terminal.
Boards contain the logical aspect of the tic-tac-toe boards, and own Graphical Boards.
A wrapper was created for the C library used's plane object.
A handler RAII object was created for managing the library as a whole.

I changed the entire class layout from the original proposal once I started understanding the graphics library.

## List Data Structure

Arrays are used to contain all the cell states.
Arrays are also used to contain graphical board children.

## File I/O

A log of all the moves made is written to a file as players interact with the program.
This isn't particularly neccisary, but it allows for an extention to the program of reading in
from log files and replaying games, a functionality I intend to implement at some point.

## Documentation

Documentation for this project is contained in Javadoc style comments in header files.
Documentation pages can be generated through the use of Doxygen.

With Doxygen on the PATH, run the following:

```shell
make docs
```

Documentation will also be generated by the `all` target in the Makefile.

## Reflection

This project helped me to become aquainted with actual modern cpp development.
While I already knew many ownership concepts due to my experiences in Rust,
using smart pointers in this project helped me to understand when ownership is
neccisary and when a raw pointer might be the better choice.

It also helped me to become familiar with the C++ core guidelines and project management
in C++, including documentation.

I tried to be as "real world" as possible when creating this project, writing documentation
as I went, creating branches and pull requests for new features, using valgrind, &c.
I have had plenty of experience doing this for other languages, but the ecosystem is totally
different and a lot more free-form in C++, which was a good experience.

## Gameplay

### Making Moves

Cells are selected with the keys 0-8, arranged as below.

```
|0|1|2|
|3|4|5|
|6|7|8|
```

No indication is given for when to select a Leaf Board, but typing a number between 0 and 9
will select one when appropriate.

Read the gameplay overview for an explanation of gameplay and terms.

### Overview

Ultimate Tic-Tac-Toe is extremely similar to regular Tic-Tac-Toe; players
familiar with the original can expect to pick up the expanded ruleset quickly.

Fundamentally, Ultimate Tic-Tac-Toe is game of Tic-Tac-Toe where each cell of
the board (now called the "Primary Board") contains another Tic-Tac-Toe board
(called a Leaf Board).

Like in the original game, players take turns claiming cells until one claims
three in a row. In Ultimate Tic-Tac-Toe, however, moves are made in the cells of
a Leaf Board.
Once a Leaf Board is won, the corresponding cell of the Primary Board is claimed
for the winner. Once three consecutive Leaf Boards have been won by the same
player (corresponding to cells of the Primary Board), that player wins the
Primary Board and thereby the game.

### Selecting Leaf Boards

Cells can only be claimed within the currently active Leaf Board.

At the start of the game, the X player selects a Leaf Board to make their play
in, as well as the cell of said Leaf Board they would like to claim.

In most other cases, however, the currently active Leaf Board is determined by
the cell of the Leaf Board previously claimed.
An exception applies when the Leaf Board that would be active is already won, in
which case the current player can select any unclaimed Leaf Board.

Gameplay Example:

**Turn 1:**

```
Primary Board     Active Leaf Board (0)     Description
   |A| | |              | | | |             X Selects the Leaf Board 0.
   | | | |              | | | |
   | | | |              | | | |
```

```
Primary Board     Active Leaf Board (0)     Description
   |A| | |              | | | |             X Selects Leaf Cell 4.
   | | | |              | |X| |
   | | | |              | | | |
```

**Turn 2:**

```
Primary Board     Active Leaf Board (4)     Description
   | | | |              | | | |             Leaf Board 4 is now active.
   | |A| |              | | | |             O must make a move in the newly
   | | | |              | | | |             active Leaf Board.
```

```
Primary Board     Active Leaf Board (4)     Description
   | | | |              |O| | |             O Selects Leaf Cell 0.
   | |A| |              | | | |
   | | | |              | | | |
```

**Turn 3:**

```
Primary Board     Active Leaf Board (0)     Description
   |A| | |              | | | |             Leaf Board 0 is now active.
   | | | |              | |X| |             X must make a move in the newly
   | | | |              | | | |             active Leaf Board.
                                            State for Leaf Board 0 persists from
                                            turn one.
```

## Dependencies

- [Notcurses](https://github.com/dankamongmen/notcurses)
- [GSL](#gsl)

### Optional Dependencies

- [Doxygen](https://www.doxygen.nl/) (for documentation)
- [Doxygen Awesome CSS](#doxygen-awesome-css) (for documentation styling)

## Submodules

This project includes multiple git submodules. As such, users should clone
using the `--recurse-submodules` flag.

To update submodules use the following command:

```shell
git submodule update --init --recursive
```

Alternatively, users may choose to clone these submodules manually according
to the information provided in `.gitmodules`. Pay close attention to the specific
branches used for each submodule.

### Doxygen Awesome CSS {#doxygen-awesome-css}

Doxygen's default HTML output looks like a router configuration menu, so this
project uses [Doxygen Awesome CSS](https://github.com/jothepro/doxygen-awesome-css)
to improve the layout and styling of its documentation.

For the convenience of not needing to install an additional library, this is
provided through a git submodule in the `doxygen-awesome-css/` directory.

This dependency is optional, omission will result in an error when building
documentation. To resolve, either clone the submodule or edit the `Doxyfile`
to exclude the styling this dependency provides.

### Guidelines Support Library {#gsl}

This project uses [Microsoft's Guidelines Support Library](https://github.com/microsoft/GSL)
for certain functions (checked narrowing, preconditions, and postconditions).

For the convenience of not needing to install an additional library, this is
provided through a git submodule in the `GSL/` directory.

The header files of this directory are included in linking, and are referenced
within the code. As such, installing GSL locally will likely not link correctly
with this project.
